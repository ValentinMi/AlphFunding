/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as PoolContractJson } from "../Pool.ral.json";
import { getContractByCodeHash } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace PoolTypes {
  export type Fields = {
    name: HexString;
    description: HexString;
    creator: Address;
    beneficiary: Address;
    end: bigint;
    goal: bigint;
    totalCollected: bigint;
    hasBeenWithdrawn: boolean;
  };

  export type State = ContractState<Fields>;

  export type ContributeEvent = ContractEvent<{
    contributor: Address;
    amount: bigint;
    totalCollected: bigint;
  }>;
  export type RefundEvent = ContractEvent<{
    contributor: Address;
    amount: bigint;
    totalCollected: bigint;
  }>;

  export interface CallMethodTable {
    getTotalCollected: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getEnd: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getGoal: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getBeneficiary: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getCreator: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDescription: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getHasBeenWithdrawn: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    getCallerContribution: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    contribute: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    refund: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> =
    Callss["length"] extends 1
      ? MultiCallResults<Callss[0]>
      : { [index in keyof Callss]: MultiCallResults<Callss[index]> };

  export interface SignExecuteMethodTable {
    getTotalCollected: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getEnd: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getGoal: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getBeneficiary: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCreator: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getName: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getDescription: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getHasBeenWithdrawn: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCallerContribution: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    contribute: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    refund: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<PoolInstance, PoolTypes.Fields> {
  encodeFields(fields: PoolTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = { Contribute: 0, Refund: 1 };
  consts = {
    ErrorCodes: {
      CollectIsFinished: BigInt("0"),
      GoalAlreadyReached: BigInt("1"),
      CollectNotFinished: BigInt("2"),
      NotTheBeneficiary: BigInt("3"),
      NoContribution: BigInt("4"),
      NotEnoughFunds: BigInt("5"),
      FundsAlreadyCollected: BigInt("6"),
    },
  };

  at(address: string): PoolInstance {
    return new PoolInstance(address);
  }

  tests = {
    getTotalCollected: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(
        this,
        "getTotalCollected",
        params,
        getContractByCodeHash
      );
    },
    getEnd: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "getEnd", params, getContractByCodeHash);
    },
    getGoal: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "getGoal", params, getContractByCodeHash);
    },
    getBeneficiary: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<Address, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "getBeneficiary", params, getContractByCodeHash);
    },
    getCreator: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<Address, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "getCreator", params, getContractByCodeHash);
    },
    getName: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<HexString, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "getName", params, getContractByCodeHash);
    },
    getDescription: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<HexString, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "getDescription", params, getContractByCodeHash);
    },
    getHasBeenWithdrawn: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<boolean, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(
        this,
        "getHasBeenWithdrawn",
        params,
        getContractByCodeHash
      );
    },
    getCallerContribution: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(
        this,
        "getCallerContribution",
        params,
        getContractByCodeHash
      );
    },
    contribute: async (
      params: TestContractParams<
        PoolTypes.Fields,
        { amount: bigint },
        { contributions?: Map<Address, bigint> }
      >
    ): Promise<
      TestContractResult<null, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "contribute", params, getContractByCodeHash);
    },
    withdraw: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    refund: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "refund", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const Pool = new Factory(
  Contract.fromJson(
    PoolContractJson,
    "=38-2+5c=2-2+90=1-3+220=359-1+5=203-1+c=40+7a7e0214696e73657274206174206d617020706174683a2000=159-1+8=178+7a7e021472656d6f7665206174206d617020706174683a2000=46",
    "dc8799055ea5d717e1d9d85424aa94ac760e7a18a4a3a230b6499ace4a0b9da7",
    []
  )
);

// Use this class to interact with the blockchain
export class PoolInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    contributions: new RalphMap<Address, bigint>(
      Pool.contract,
      this.contractId,
      "contributions"
    ),
  };

  async fetchState(): Promise<PoolTypes.State> {
    return fetchContractState(Pool, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeContributeEvent(
    options: EventSubscribeOptions<PoolTypes.ContributeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Pool.contract,
      this,
      options,
      "Contribute",
      fromCount
    );
  }

  subscribeRefundEvent(
    options: EventSubscribeOptions<PoolTypes.RefundEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Pool.contract,
      this,
      options,
      "Refund",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      PoolTypes.ContributeEvent | PoolTypes.RefundEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Pool.contract, this, options, fromCount);
  }

  view = {
    getTotalCollected: async (
      params?: PoolTypes.CallMethodParams<"getTotalCollected">
    ): Promise<PoolTypes.CallMethodResult<"getTotalCollected">> => {
      return callMethod(
        Pool,
        this,
        "getTotalCollected",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getEnd: async (
      params?: PoolTypes.CallMethodParams<"getEnd">
    ): Promise<PoolTypes.CallMethodResult<"getEnd">> => {
      return callMethod(
        Pool,
        this,
        "getEnd",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getGoal: async (
      params?: PoolTypes.CallMethodParams<"getGoal">
    ): Promise<PoolTypes.CallMethodResult<"getGoal">> => {
      return callMethod(
        Pool,
        this,
        "getGoal",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBeneficiary: async (
      params?: PoolTypes.CallMethodParams<"getBeneficiary">
    ): Promise<PoolTypes.CallMethodResult<"getBeneficiary">> => {
      return callMethod(
        Pool,
        this,
        "getBeneficiary",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCreator: async (
      params?: PoolTypes.CallMethodParams<"getCreator">
    ): Promise<PoolTypes.CallMethodResult<"getCreator">> => {
      return callMethod(
        Pool,
        this,
        "getCreator",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: PoolTypes.CallMethodParams<"getName">
    ): Promise<PoolTypes.CallMethodResult<"getName">> => {
      return callMethod(
        Pool,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDescription: async (
      params?: PoolTypes.CallMethodParams<"getDescription">
    ): Promise<PoolTypes.CallMethodResult<"getDescription">> => {
      return callMethod(
        Pool,
        this,
        "getDescription",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getHasBeenWithdrawn: async (
      params?: PoolTypes.CallMethodParams<"getHasBeenWithdrawn">
    ): Promise<PoolTypes.CallMethodResult<"getHasBeenWithdrawn">> => {
      return callMethod(
        Pool,
        this,
        "getHasBeenWithdrawn",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCallerContribution: async (
      params?: PoolTypes.CallMethodParams<"getCallerContribution">
    ): Promise<PoolTypes.CallMethodResult<"getCallerContribution">> => {
      return callMethod(
        Pool,
        this,
        "getCallerContribution",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    contribute: async (
      params: PoolTypes.CallMethodParams<"contribute">
    ): Promise<PoolTypes.CallMethodResult<"contribute">> => {
      return callMethod(
        Pool,
        this,
        "contribute",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params?: PoolTypes.CallMethodParams<"withdraw">
    ): Promise<PoolTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        Pool,
        this,
        "withdraw",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    refund: async (
      params?: PoolTypes.CallMethodParams<"refund">
    ): Promise<PoolTypes.CallMethodResult<"refund">> => {
      return callMethod(
        Pool,
        this,
        "refund",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getTotalCollected: async (
      params: PoolTypes.SignExecuteMethodParams<"getTotalCollected">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getTotalCollected">> => {
      return signExecuteMethod(Pool, this, "getTotalCollected", params);
    },
    getEnd: async (
      params: PoolTypes.SignExecuteMethodParams<"getEnd">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getEnd">> => {
      return signExecuteMethod(Pool, this, "getEnd", params);
    },
    getGoal: async (
      params: PoolTypes.SignExecuteMethodParams<"getGoal">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getGoal">> => {
      return signExecuteMethod(Pool, this, "getGoal", params);
    },
    getBeneficiary: async (
      params: PoolTypes.SignExecuteMethodParams<"getBeneficiary">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getBeneficiary">> => {
      return signExecuteMethod(Pool, this, "getBeneficiary", params);
    },
    getCreator: async (
      params: PoolTypes.SignExecuteMethodParams<"getCreator">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getCreator">> => {
      return signExecuteMethod(Pool, this, "getCreator", params);
    },
    getName: async (
      params: PoolTypes.SignExecuteMethodParams<"getName">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getName">> => {
      return signExecuteMethod(Pool, this, "getName", params);
    },
    getDescription: async (
      params: PoolTypes.SignExecuteMethodParams<"getDescription">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getDescription">> => {
      return signExecuteMethod(Pool, this, "getDescription", params);
    },
    getHasBeenWithdrawn: async (
      params: PoolTypes.SignExecuteMethodParams<"getHasBeenWithdrawn">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getHasBeenWithdrawn">> => {
      return signExecuteMethod(Pool, this, "getHasBeenWithdrawn", params);
    },
    getCallerContribution: async (
      params: PoolTypes.SignExecuteMethodParams<"getCallerContribution">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getCallerContribution">> => {
      return signExecuteMethod(Pool, this, "getCallerContribution", params);
    },
    contribute: async (
      params: PoolTypes.SignExecuteMethodParams<"contribute">
    ): Promise<PoolTypes.SignExecuteMethodResult<"contribute">> => {
      return signExecuteMethod(Pool, this, "contribute", params);
    },
    withdraw: async (
      params: PoolTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<PoolTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(Pool, this, "withdraw", params);
    },
    refund: async (
      params: PoolTypes.SignExecuteMethodParams<"refund">
    ): Promise<PoolTypes.SignExecuteMethodResult<"refund">> => {
      return signExecuteMethod(Pool, this, "refund", params);
    },
  };

  async multicall<Callss extends PoolTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<PoolTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      Pool,
      this,
      callss,
      getContractByCodeHash
    )) as PoolTypes.MulticallReturnType<Callss>;
  }
}
