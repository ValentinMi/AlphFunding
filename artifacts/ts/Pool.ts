/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as PoolContractJson } from "../Pool.ral.json";
import { getContractByCodeHash } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace PoolTypes {
  export type Fields = {
    owner: Address;
    end: bigint;
    goal: bigint;
    totalCollected: bigint;
  };

  export type State = ContractState<Fields>;

  export type ContributeEvent = ContractEvent<{
    contributor: Address;
    amount: bigint;
    totalCollected: bigint;
  }>;

  export interface CallMethodTable {
    getTotalCollected: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getEnd: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getGoal: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    contribute: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    refund: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getTotalCollected: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getEnd: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getGoal: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    contribute: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    refund: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<PoolInstance, PoolTypes.Fields> {
  encodeFields(fields: PoolTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as PoolTypes.Fields;
  }

  eventIndex = { Contribute: 0 };
  consts = {
    ErrorCodes: {
      CollectIsFinished: BigInt("0"),
      GoalAlreadyReached: BigInt("1"),
      CollectNotFinished: BigInt("2"),
      NotTheOwner: BigInt("3"),
      NoContribution: BigInt("4"),
      NotEnoughFunds: BigInt("5"),
    },
  };

  at(address: string): PoolInstance {
    return new PoolInstance(address);
  }

  tests = {
    getTotalCollected: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(
        this,
        "getTotalCollected",
        params,
        getContractByCodeHash
      );
    },
    getEnd: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "getEnd", params, getContractByCodeHash);
    },
    getGoal: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "getGoal", params, getContractByCodeHash);
    },
    getOwner: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<Address, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "getOwner", params, getContractByCodeHash);
    },
    contribute: async (
      params: TestContractParams<
        PoolTypes.Fields,
        { amount: bigint },
        { contributions?: Map<Address, bigint> }
      >
    ): Promise<
      TestContractResult<null, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "contribute", params, getContractByCodeHash);
    },
    withdraw: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    refund: async (
      params: Omit<
        TestContractParams<
          PoolTypes.Fields,
          never,
          { contributions?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { contributions?: Map<Address, bigint> }>
    > => {
      return testMethod(this, "refund", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const Pool = new Factory(
  Contract.fromJson(
    PoolContractJson,
    "=18-2+a2=2-2+cc=2-2+54=125-1+9=106+7a7e0214696e73657274206174206d617020706174683a2000=139-1+3=178+7a7e021472656d6f7665206174206d617020706174683a2000=30",
    "10bd0931540a5cf21c48c98d04753c061ecd90edc9cf623eca43b1ee9803a0b1",
    []
  )
);

// Use this class to interact with the blockchain
export class PoolInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    contributions: new RalphMap<Address, bigint>(
      Pool.contract,
      this.contractId,
      "contributions"
    ),
  };

  async fetchState(): Promise<PoolTypes.State> {
    return fetchContractState(Pool, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeContributeEvent(
    options: EventSubscribeOptions<PoolTypes.ContributeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Pool.contract,
      this,
      options,
      "Contribute",
      fromCount
    );
  }

  view = {
    getTotalCollected: async (
      params?: PoolTypes.CallMethodParams<"getTotalCollected">
    ): Promise<PoolTypes.CallMethodResult<"getTotalCollected">> => {
      return callMethod(
        Pool,
        this,
        "getTotalCollected",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getEnd: async (
      params?: PoolTypes.CallMethodParams<"getEnd">
    ): Promise<PoolTypes.CallMethodResult<"getEnd">> => {
      return callMethod(
        Pool,
        this,
        "getEnd",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getGoal: async (
      params?: PoolTypes.CallMethodParams<"getGoal">
    ): Promise<PoolTypes.CallMethodResult<"getGoal">> => {
      return callMethod(
        Pool,
        this,
        "getGoal",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOwner: async (
      params?: PoolTypes.CallMethodParams<"getOwner">
    ): Promise<PoolTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        Pool,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    contribute: async (
      params: PoolTypes.CallMethodParams<"contribute">
    ): Promise<PoolTypes.CallMethodResult<"contribute">> => {
      return callMethod(
        Pool,
        this,
        "contribute",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params?: PoolTypes.CallMethodParams<"withdraw">
    ): Promise<PoolTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        Pool,
        this,
        "withdraw",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    refund: async (
      params?: PoolTypes.CallMethodParams<"refund">
    ): Promise<PoolTypes.CallMethodResult<"refund">> => {
      return callMethod(
        Pool,
        this,
        "refund",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getTotalCollected: async (
      params: PoolTypes.SignExecuteMethodParams<"getTotalCollected">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getTotalCollected">> => {
      return signExecuteMethod(Pool, this, "getTotalCollected", params);
    },
    getEnd: async (
      params: PoolTypes.SignExecuteMethodParams<"getEnd">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getEnd">> => {
      return signExecuteMethod(Pool, this, "getEnd", params);
    },
    getGoal: async (
      params: PoolTypes.SignExecuteMethodParams<"getGoal">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getGoal">> => {
      return signExecuteMethod(Pool, this, "getGoal", params);
    },
    getOwner: async (
      params: PoolTypes.SignExecuteMethodParams<"getOwner">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getOwner">> => {
      return signExecuteMethod(Pool, this, "getOwner", params);
    },
    contribute: async (
      params: PoolTypes.SignExecuteMethodParams<"contribute">
    ): Promise<PoolTypes.SignExecuteMethodResult<"contribute">> => {
      return signExecuteMethod(Pool, this, "contribute", params);
    },
    withdraw: async (
      params: PoolTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<PoolTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(Pool, this, "withdraw", params);
    },
    refund: async (
      params: PoolTypes.SignExecuteMethodParams<"refund">
    ): Promise<PoolTypes.SignExecuteMethodResult<"refund">> => {
      return signExecuteMethod(Pool, this, "refund", params);
    },
  };

  async multicall<Calls extends PoolTypes.MultiCallParams>(
    calls: Calls
  ): Promise<PoolTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Pool,
      this,
      calls,
      getContractByCodeHash
    )) as PoolTypes.MultiCallResults<Calls>;
  }
}
