Contract Pool(
    name: ByteVec,
    description: ByteVec,
    creator: Address,
    beneficiary: Address,
    end: U256,
    goal: U256,
    mut totalCollected: U256,
    mut hasBeenWithdrawn: Bool
) {
    
    mapping[Address, U256] contributions

    event Contribute(contributor: Address, amount: U256, totalCollected: U256)
    event Refund(contributor: Address, amount: U256, totalCollected: U256)

    enum ErrorCodes {
        CollectIsFinished = 0
        GoalAlreadyReached = 1
        CollectNotFinished = 2
        NotTheBeneficiary = 3
        NoContribution = 4
        NotEnoughFunds = 5
        FundsAlreadyCollected = 6
    }

    pub fn getTotalCollected() -> U256 {
        return totalCollected
    }

    pub fn getEnd() -> U256 {
        return end
    }

    pub fn getGoal() -> U256 {
        return goal
    }

    pub fn getBeneficiary() -> Address {
        return beneficiary
    }

    pub fn getCreator() -> Address {
        return creator
    }

    pub fn getName() -> ByteVec {
        return name
    }

    pub fn getDescription() -> ByteVec {
        return description
    }

    pub fn getHasBeenWithdrawn() -> Bool {
        return hasBeenWithdrawn
    }

    pub fn getCallerContribution() -> U256 {
        let caller = callerAddress!()
        if (contributions.contains!(caller)) {
            // If caller has already contribute
            return contributions[caller]
        } else {
            return 0
        }
    }

    // Allows to contribute to the pool
    @using(preapprovedAssets = true, updateFields = true, checkExternalCaller = false, payToContractOnly = true)
    pub fn contribute(amount: U256) -> () {
        let blockTimeStamp = blockTimeStamp!()
        assert!(blockTimeStamp < end, ErrorCodes.CollectIsFinished)
        assert!(amount > 0, ErrorCodes.NotEnoughFunds)

        let caller = callerAddress!()
        let key = caller

        transferTokenToSelf!(caller, ALPH, amount)

        if (contributions.contains!(key)) {
            // If caller has already contribute
            contributions[key] = contributions[key] + amount
        } else {
            contributions.insert!(caller, key, amount)
        }

        totalCollected = totalCollected + amount
        
        emit Contribute(caller, amount, totalCollected)
    }

    // Allows the beneficiary or owner to withdraw pool's gains to beneficiary address
    @using(assetsInContract = true, updateFields = true)
    pub fn withdraw() -> () {
        assert!(hasBeenWithdrawn == false, ErrorCodes.FundsAlreadyCollected)
        let caller = callerAddress!()
        checkCaller!(caller == beneficiary || caller == creator, ErrorCodes.NotTheBeneficiary)

        let blockTimeStamp = blockTimeStamp!()
        assert!(blockTimeStamp >= end, ErrorCodes.CollectNotFinished)

        transferTokenFromSelf!(beneficiary, ALPH, totalCollected)
        hasBeenWithdrawn = true
    }

    // Allows to refund the contribution to contributor address
    @using(assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn refund() -> () {
        let blockTimeStamp = blockTimeStamp!()
        assert!(blockTimeStamp < end, ErrorCodes.CollectIsFinished)
        
        assert!(totalCollected < goal, ErrorCodes.GoalAlreadyReached)
        
        let caller = callerAddress!()
        assert!(contributions.contains!(caller), ErrorCodes.NoContribution)

        let contributionAmount = contributions[caller]

        contributions.remove!(caller, caller)
        totalCollected = totalCollected - contributionAmount

        transferTokenFromSelf!(caller, ALPH, contributionAmount)

        emit Refund(caller, contributionAmount, totalCollected)
    }
    
}